#!/usr/bin/env python

# standard library imports
import unittest
import os
import shutil
import subprocess

# third party imports
import numpy as np

# local imports
from dainv import utilities as utils


class TestUtilities(unittest.TestCase):

    def setUp(self):
        self.file = "test_input.in"
        str_test = 'a = 1'
        str_test += '\n    '
        str_test += '\n   bb 2'
        str_test += '\n   bbb 2'
        str_test += '\n       '
        str_test += '\nc          3 # ignore this!'
        str_test += '\n # d = 4'
        str_test += '\n          e:hello   # a 2'
        str_test += '\nf : world! # end'
        str_test += '\ng : 1,  2, 3,4,   5 #,6, # 7'
        test_file = open(self.file, "w")
        test_file.write(str_test)
        test_file.close()

    def tearDown(self):
        os.remove(self.file)

    def test_utils(self):
        pattern = 'bb 2'
        subst = 'b 2'
        utils.replace(self.file, pattern, subst)
        input_dict = utils.read_input_data(self.file)
        input_dict['g'] = utils.extract_list_from_string(
            input_dict['g'], sep=',', type_func=int)
        input_dict_correct = {'a': '1',
                              'b': '2',
                              'bb': '2',
                              'c': '3',
                              'e': 'hello',
                              'f': 'world!',
                              'g': [int(1), int(2), int(3), int(4), int(5)]
                              }
        self.assertEqual(input_dict, input_dict_correct)


class TestEnKF(unittest.TestCase):
    """ Test the EnKF filter using the Lorentz model. """

    def setUp(self):
        self.dir = './lorenz'
        try:
            os.makedirs(self.dir)
        except:
            self.tearDown()
            os.makedirs(self.dir)
        self.main_input_file = 'dainv.in'
        self.model_input_file = 'lorenz.in'
        self.obs_file = self.dir + os.sep + 'truth.dat'

        def _create_main_input(filename):
            main_str = ''
            main_str += '\ndyn_model lorenz'
            main_str += '\ndyn_model_input ./lorenz.in'
            main_str += '\nda_filter EnKF'
            main_str += '\nt_end 0.75'
            main_str += '\nda_interval 0.25'
            main_str += '\nnsamples 10'
            main_str += '\nsave_flag True'
            main_str += '\nsave_folder ./results'
            main_str += '\nverbosity 2'
            main_str += '\nrand_seed_flag True'
            main_str += '\nrand_seed 1'
            main_in = open(filename, "w")
            main_in.write(main_str)
            main_in.close()

        def _create_model_input(filename):
            lorenz_str = ''
            lorenz_str += '\ndt_interval 0.025'
            lorenz_str += '\nperturb_rho True'
            lorenz_str += '\nperturb_beta True'
            lorenz_str += '\nperturb_sigma True'
            lorenz_str += '\nx 1.'
            lorenz_str += '\ny 1.2'
            lorenz_str += '\nz 1.'
            lorenz_str += '\nrho 33.'
            lorenz_str += '\nbeta 2.66667'
            lorenz_str += '\nsigma 10.'
            lorenz_str += '\nx_rel_std 0.1'
            lorenz_str += '\nobs_rel_std 0.1'
            model_in = open(filename, "w")
            model_in.write(lorenz_str)
            model_in.close()

        def _create_obs(filename):
            obs_str = ''
            obs_str += '2.500000000000000000e-01 1.000000000000000000e+00 ' + \
                '1.199999999999999956e+00 1.000000000000000000e+00\n'
            obs_str += '2.750000000000000222e-01 1.135154571633896659e+00 ' + \
                '2.003484397496460012e+00 9.764988098706760544e-01\n'
            obs_str += '3.000000000000000444e-01 1.433354840048962409e+00 ' + \
                '2.959028035944516244e+00 9.900563119120283639e-01\n'
            obs_str += '3.250000000000000666e-01 1.906612641931585195e+00 ' + \
                '4.192676399485878669e+00 1.069790496242132294e+00\n'
            obs_str += '3.500000000000000888e-01 2.593329931400846000e+00 ' + \
                '5.843134934038963557e+00 1.272434881151752961e+00\n'
            obs_str += '3.750000000000001110e-01 3.556767417742376036e+00 ' + \
                '8.073354878123630840e+00 1.705440745111769907e+00\n'
            obs_str += '4.000000000000001332e-01 4.885036414547054839e+00 ' + \
                '1.106845961381864996e+01 2.568584066520098297e+00\n'
            obs_str += '4.250000000000001554e-01 6.687378755423130983e+00 ' + \
                '1.500058203475930263e+01 4.221866432910099221e+00\n'
            obs_str += '4.500000000000001776e-01 9.075504516459760751e+00 ' + \
                '1.991390908142917837e+01 7.274934805273599814e+00\n'
            obs_str += '4.750000000000001998e-01 1.210666475164400602e+01 ' + \
                '2.544742924219516667e+01 1.263309289506385547e+01\n'
            obs_str += '5.000000000000002220e-01 1.565279753575336308e+01 ' + \
                '3.034468334866155104e+01 2.126761445334744849e+01\n'
            obs_str += '5.250000000000002442e-01 1.918923093304584526e+01 ' + \
                '3.206708337335222581e+01 3.327173388978415147e+01\n'
            obs_str += '5.500000000000002665e-01 2.166471906730226138e+01 ' + \
                '2.770537870483585507e+01 4.626145761458203509e+01\n'
            obs_str += '5.750000000000002887e-01 2.186189085994903891e+01 ' + \
                '1.704769766457230773e+01 5.535860958807191423e+01\n'
            obs_str += '6.000000000000003109e-01 1.931941887751181497e+01 ' + \
                '4.371200214916024507e+00 5.716492621802660068e+01\n'
            obs_str += '6.250000000000003331e-01 1.481498420682063077e+01 ' + \
                '-5.305626049242532005e+00 5.319455452391371608e+01\n'
            obs_str += '6.500000000000003553e-01 9.694111223661018073e+00 ' + \
                '-1.046166455503115600e+01 4.737528726479436614e+01\n'
            obs_str += '6.750000000000003775e-01 4.974251155487866782e+00 ' + \
                '-1.235397911140164773e+01 4.230152496824524633e+01\n'
            obs_str += '7.000000000000003997e-01 1.093012630657327788e+00 ' + \
                '-1.261422157760782703e+01 3.868275685264790553e+01\n'
            obs_str += '7.250000000000004219e-01 -1.904217092504284281e+00 ' + \
                '-1.226474598635703828e+01 3.633414993439520657e+01\n'
            obs_str += '7.500000000000004441e-01 -4.139878852084301286e+00 ' + \
                '-1.177466831429744509e+01 3.488716960492992314e+01\n'
            obs_str += '7.750000000000004663e-01 -5.774237109877104146e+00 ' + \
                '-1.131145018566074789e+01 3.403332754928450044e+01\n'
            obs_str += '8.000000000000004885e-01 -6.951863390983781699e+00 ' + \
                '-1.091174635604043885e+01 3.355685008338858211e+01\n'
            obs_str += '8.250000000000005107e-01 -7.787152554491558298e+00 ' + \
                '-1.056613739618313730e+01 3.331267234640092312e+01\n'
            obs_str += '8.500000000000005329e-01 -8.365600765659319649e+00 ' + \
                '-1.025556579455677308e+01 3.320208714856931920e+01\n'
            obs_str += '8.750000000000005551e-01 -8.749921970685056394e+00 ' + \
                '-9.965133564636674990e+00 3.315644074852772860e+01\n'
            obs_str += '9.000000000000005773e-01 -8.986563956166577327e+00 ' + \
                '-9.687930034495153109e+00 3.312782069453901101e+01\n'
            obs_str += '9.250000000000005995e-01 -9.111069468030869700e+00 ' + \
                '-9.424578115956141033e+00 3.308398640237673050e+01\n'
            obs_str += '9.500000000000006217e-01 -9.151922907098640536e+00 ' + \
                '-9.181074093003770642e+00 3.300539707858423100e+01\n'
            obs_str += '9.750000000000006439e-01 -9.133001118221466541e+00 ' + \
                '-8.966187672065073500e+00 3.288304552554440363e+01\n'
            obs_str += '1.000000000000000666e+00 -9.074925485863168717e+00 ' + \
                '-8.789100279034226304e+00 3.271647666921228392e+01\n'
            obs_file = open(filename, "w")
            obs_file.write(obs_str)
            obs_file.close()

        _create_main_input(self.dir + os.sep + self.main_input_file)
        _create_model_input(self.dir + os.sep + self.model_input_file)
        _create_obs(self.obs_file)

        bash_command = "cd {};".format(self.dir) + \
            "vt_dainv.py {} > log.enkf".format(self.main_input_file)
        subprocess.call(bash_command, shell=True)

    def tearDown(self):
        shutil.rmtree(self.dir)

    def test_HX(self):
        HX3_org = np.array([
            [-8.239558466708855278e+00, -8.796214609736356493e+00,
             -8.868320058781602455e+00, -1.119839704968123684e+01,
             -8.959984295087490835e+00, -8.926695776461349041e+00,
             -8.511053076380271420e+00, -1.158461909147973046e+01,
             -9.530429756011951525e+00, -9.712157074432308690e+00],
            [-8.248856655438650876e+00, -8.547830152441656892e+00,
             -8.474196755911844292e+00, -1.181835613770015847e+01,
             -8.906739867074248806e+00, -8.947692448432048806e+00,
             -8.917859012130392671e+00, -1.159332136065955865e+01,
             -9.348259317658943246e+00, -9.872083641064453019e+00],
            [3.048423809949264296e+01, 3.339775028406195645e+01,
             3.360218627285959769e+01, 3.448850519815867699e+01,
             3.183306065158769016e+01, 3.288807451071446053e+01,
             2.998284885172225600e+01, 3.505358850878862143e+01,
             3.432229915358562522e+01, 3.295758690428642979e+01]
        ])
        HX3 = np.loadtxt(self.dir + os.sep + 'results' + os.sep + 'HX_3')
        check_HX3 = np.allclose(HX3, HX3_org)
        self.assertEqual(check_HX3, True)

    def test_obs(self):
        obs3_org = np.array([
            [-7.934817310244557831e+00, -7.934817310244557831e+00,
             -7.934817310244557831e+00, -7.934817310244557831e+00,
             -7.934817310244557831e+00, -7.934817310244557831e+00,
             -7.934817310244557831e+00, -7.934817310244557831e+00,
             -7.934817310244557831e+00, -7.934817310244557831e+00],
            [-7.301336356862281107e+00, -7.301336356862281107e+00,
             -7.301336356862281107e+00, -7.301336356862281107e+00,
             -7.301336356862281107e+00, -7.301336356862281107e+00,
             -7.301336356862281107e+00, -7.301336356862281107e+00,
             -7.301336356862281107e+00, -7.301336356862281107e+00],
            [4.008546688953023107e+01, 4.008546688953023107e+01,
             4.008546688953023107e+01, 4.008546688953023107e+01,
             4.008546688953023107e+01, 4.008546688953023107e+01,
             4.008546688953023107e+01, 4.008546688953023107e+01,
             4.008546688953023107e+01, 4.008546688953023107e+01]
        ])
        obs3 = np.loadtxt(self.dir + os.sep + 'results' + os.sep + 'obs_3')
        check_obs3 = np.allclose(obs3, obs3_org)
        self.assertEqual(check_obs3, True)

    def test_obs_error(self):
        obserr3_org = np.array([
            [1.015041235456952018e+00, 0.000000000000000000e+00,
             0.000000000000000000e+00],
            [0.000000000000000000e+00, 9.582648427298796623e-01,
             0.000000000000000000e+00],
            [0.000000000000000000e+00, 0.000000000000000000e+00,
             1.136800798985536431e+01]
        ])
        obserr3 = np.loadtxt(self.dir + os.sep + 'results' + os.sep + 'R_3')
        check_obserr3 = np.allclose(obserr3, obserr3_org)
        self.assertEqual(check_obserr3, True)

    def test_state_forecast(self):
        xf3_org = np.array([
            [-8.239558466708855278e+00, -8.796214609736356493e+00,
             -8.868320058781602455e+00, -1.119839704968123684e+01,
             -8.959984295087490835e+00, -8.926695776461349041e+00,
             -8.511053076380271420e+00, -1.158461909147973046e+01,
             -9.530429756011951525e+00, -9.712157074432308690e+00],
            [-8.248856655438650876e+00, -8.547830152441656892e+00,
             -8.474196755911844292e+00, -1.181835613770015847e+01,
             -8.906739867074248806e+00, -8.947692448432048806e+00,
             -8.917859012130392671e+00, -1.159332136065955865e+01,
             -9.348259317658943246e+00, -9.872083641064453019e+00],
            [3.048423809949264296e+01, 3.339775028406195645e+01,
             3.360218627285959769e+01, 3.448850519815867699e+01,
             3.183306065158769016e+01, 3.288807451071446053e+01,
             2.998284885172225600e+01, 3.505358850878862143e+01,
             3.432229915358562522e+01, 3.295758690428642979e+01],
            [3.167458566374095952e+01, 3.400961720339790162e+01,
             3.377772213820317404e+01, 3.418580636288636754e+01,
             3.242084938894839041e+01, 3.396504264650899785e+01,
             3.168320333209627648e+01, 3.387023629835258731e+01,
             3.433827661024521660e+01, 3.339108340069761738e+01],
            [2.553363708127021514e+00, 2.563826233021348600e+00,
             2.532747510895557053e+00, 3.009978086730114910e+00,
             2.648266626473544605e+00, 2.659309470295898148e+00,
             2.636453834190948697e+00, 3.164718909126650992e+00,
             2.631414548734133163e+00, 2.762577710730623082e+00],
            [1.031549752005360965e+01, 1.013197714234183699e+01,
             9.788919163111472699e+00, 1.042341396834975598e+01,
             1.009301158410339028e+01, 1.046757186655657001e+01,
             1.087929100188523890e+01, 1.064664176860272882e+01,
             9.908178677950640889e+00, 1.041132433477337038e+01]
        ])
        xf3 = np.loadtxt(self.dir + os.sep + 'results' + os.sep + 'Xf_3')
        check_xf3 = np.allclose(xf3, xf3_org)
        self.assertEqual(check_xf3, True)

    def test_state_analysis(self):
        xa3_org = np.array([
            [-8.156401856690937535e+00, -8.327111110611783218e+00,
             -8.394798962128417585e+00, -8.783121737095211046e+00,
             -8.369535099345991824e+00, -8.294510367739764689e+00,
             -8.125551599451226181e+00, -9.105418155059911811e+00,
             -8.514994591746331665e+00, -8.504729773149637850e+00],
            [-7.927460709598378230e+00, -7.853298856017413065e+00,
             -7.783856261855895298e+00, -8.879932554541710488e+00,
             -8.032834258096286817e+00, -8.045711772080190727e+00,
             -8.224733748759966545e+00, -8.614062775396657656e+00,
             -8.042962221150968816e+00, -8.305466004262727964e+00],
            [3.143535259075246913e+01, 3.365893075148815683e+01,
             3.382420451153282670e+01, 3.285458420104895083e+01,
             3.215451910868765140e+01, 3.307035056273783624e+01,
             3.073296175889381132e+01, 3.324125800858581670e+01,
             3.397171698140913776e+01, 3.259365342804930066e+01],
            [3.238179900031114755e+01, 3.434155440524182268e+01,
             3.408520177187103428e+01, 3.373921720064606689e+01,
             3.283160552464389781e+01, 3.428633514539459526e+01,
             3.233269766278915114e+01, 3.332515796183634649e+01,
             3.439681935936116020e+01, 3.349455748140772471e+01],
            [2.490019352377944362e+00, 2.443280274358568427e+00,
             2.412890225987569526e+00, 2.528517918077466398e+00,
             2.496963403765023237e+00, 2.504940681200540364e+00,
             2.512883742407512777e+00, 2.676299984366117712e+00,
             2.413142369277037957e+00, 2.500774549719994688e+00],
            [1.005703335390704822e+01, 9.904879304697605136e+00,
             9.570176092105725729e+00, 9.968186461949594346e+00,
             9.808554150899359669e+00, 1.020154840314580014e+01,
             1.056210558435730462e+01, 1.021403309062184483e+01,
             9.636747365909700491e+00, 1.007497935511663378e+01]
        ])
        xa3 = np.loadtxt(self.dir + os.sep + 'results' + os.sep + 'Xa_3')
        check_xa3 = np.allclose(xa3, xa3_org)
        self.assertEqual(check_xa3, True)

    def test_misfit(self):
        misfit_org = np.array([
            1.032159443407558053e+00,
            2.424352326437468341e-01,
            8.164937281203751285e-01
        ])
        misfit = np.loadtxt(
            self.dir + os.sep + 'results' + os.sep + 'misfit_norm')
        check_misfit = np.allclose(misfit, misfit_org)
        self.assertEqual(check_misfit, True)

    def test_sigma_model(self):
        sigma_model_org = np.array([
            3.012085083464613788e+00,
            7.826514555760285541e-01,
            7.538981643676551103e-01
        ])
        sigma_model = np.loadtxt(
            self.dir + os.sep + 'results' + os.sep + 'sigma_HX')
        check_sigma_model = np.allclose(sigma_model, sigma_model_org)
        self.assertEqual(check_sigma_model, True)

    def test_sigma_obs(self):
        sigma_obs_org = np.array([
            1.396683171516473143e+00,
            1.281275166650363451e+00,
            1.217525453443362826e+00
        ])
        sigma_obs = np.loadtxt(
            self.dir + os.sep + 'results' + os.sep + 'sigma_obs')
        check_sigma_obs = np.allclose(sigma_obs, sigma_obs_org)
        self.assertEqual(check_sigma_obs, True)


if __name__ == '__main__':
    unittest.main()
