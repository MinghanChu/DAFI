#!/usr/bin/env python3
# Copyright 2020 Virginia Polytechnic Institute and State University.

""" Inverse modeling main executable.

Example
-------
    >>> dafi <input_file>

Note
----
Required DAFI inputs in input file:
    * **model_file** (``str``) -
      Name of dynamic model module/package.
    * **inverse_method** (``str``) -
      Name of inverse method from dafi.inverse_methods module.
    * **nsamples** (``int``) -
      Number of samples for ensemble.

Note
----
Optional DAFI inputs:
    * **max_iterations** (``int``, ``1``) -
      Maximum number of DA iterations at each timestep.
    * **t_end** (``float``, ``1``) -
      Final time step.
    * **t_interval** (``float``, ``1``) -
      Time interval to perform data assimilation.
    * **save** (``bool``, ``True``) -
      Save results.
    * **rand_seed** (``float``, ``None``) -
      Seed for numpy.random. If None random seed not set.
    * **inputs_model** (``dict``, ``{}``) -
      Physics model specific inputs.
    * **inputs_inverse** (``dict``, ``{}``) -
      Inverse method specific inputs.
"""

# standard library imports
import os
import subprocess
import argparse

# third party imports
import yaml

# local imports
import dafi


def _parse_args():
    parser = argparse.ArgumentParser(description='Get input file.')
    parser.add_argument('input_file', help='Name of input file')
    return parser.parse_args()


def _get_code_version():
    """ Save the Git version of DAFI if running as developer. """
    git_dir = os.path.dirname(os.path.realpath(__file__))
    cwd = os.getcwd()
    file = os.path.join(cwd, '.dafi_ver')
    bash_command = f'cd {git_dir}; git rev-parse HEAD > {file}; cd {cwd}; '
    success = False
    try:
        subprocess.check_call(bash_command, stderr=subprocess.DEVNULL)
        sucess = True
    except subprocess.CalledProcessError:
        # not a git directory
        bash_command = f'rm {file}; cd {cwd}; '
        subprocess.call(bash_command, shell=True)
    except OSError:
        # git command not found
        pass
    return success


def _read_input(input_file):
    """ Read the three input dictionaries from the input file.

    These three dictionaries are (1) the DAFI inputs describing the
    problem, (2) the inverse method specific inputs, and (3) the
    physics model input.
    """
    with open(input_file, 'r') as f:
       input_dict = yaml.load(f, yaml.SafeLoader)
    # dafi inputs
    inputs_dafi = input_dict['dafi']
    # inverse method inputs
    if 'inverse' not in input_dict or input_dict['inverse'] is None:
        inputs_inverse = dict()
    else:
        inputs_inverse = input_dict['inverse']
    # physics model inputs
    if 'model' not in input_dict or input_dict['model'] is None:
        inputs_model = dict()
    else:
        inputs_model = input_dict['model']
    return inputs_dafi, inputs_inverse, inputs_model


if __name__ == "__main__":
    args = _parse_args()
    (inputs_dafi, inputs_inverse, inputs_model) = _read_input(args.input_file)
    _ = _get_code_version()
    _ = dafi.run(**inputs_dafi,
                 inputs_inverse=inputs_inverse,
                 inputs_model=inputs_model)
